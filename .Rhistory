TTgenes <- dim(N98RIP_genes)[1]
N98RIP_genes.05 <- N98RIP_genes[N98RIP_genes$p_value < 0.05,]
rm(N98RIP_genes)
#Move Nup98 bound gene list to a vector
N98RIP_gen.05 <- N98RIP_genes.05$test_id
save.image(file = "RIP-seq tables Nucleus.RData")
rm(list=ls(globalenv()))
DDX6 <- read_delim("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/RIP-seq/Cnegs ENCODE/ensemblGenes_DDX6intersect", "\t", escape_double = FALSE, trim_ws = TRUE, skip = 1)
DDX6 <- DDX6[complete.cases(DDX6),]
DDX59 <- read_delim("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/RIP-seq/Cnegs ENCODE/ensemblGenes_DDX59intersect", "\t", escape_double = FALSE, trim_ws = TRUE, skip = 1)
DDX59 <- DDX59[complete.cases(DDX59),]
setwd("~/Desktop/extra_view/Nup98-DBPs_extraview")
DDX6 <- data.table(DDX6)
DDX59 <- data.table(DDX59)
colnames(DDX6)[1] <- "ensGene.name"
colnames(DDX59)[1] <- "ensGene.name"
coltitles <- names(DDX6)
coltitles[10:15] <- c("RIP.chrom","RIP.start","RIP.end","RIP.name","RIP.score","RIP.strand")
colnames(DDX6) <- coltitles
colnames(DDX59) <- coltitles
rm(coltitles)
DDX6RIP <- DDX6[,.(RIP.start=min(RIP.start),RIP.end=max(RIP.end),RIP.score=max(RIP.score),count=.N),by=.(ensGene.name2,ensGene.chrom,ensGene.strand)]
rm(DDX6)
DDX59RIP <- DDX59[,.(RIP.start=min(RIP.start),RIP.end=max(RIP.end),RIP.score=max(RIP.score),count=.N),by=.(ensGene.name2,ensGene.chrom,ensGene.strand)]
rm(DDX59)
#Save this as the control dataset
save.image(file = "RIP-seq tables CONTROLS Nucleus.RData")
load("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/RIP-seq tables Nucleus.RData")
#For genes that bind Nup98
DDX21RIPgeneDT$test <- (DDX21RIPgeneDT$ensGene.name2 %in% N98RIP_gen.05)
x = DDX21RIPgeneDT$count[DDX21RIPgeneDT$test == TRUE]
n = sum(DDX21RIPgeneDT$test == TRUE)*2
B = 10000
DDX21wNup98resamples = matrix(sample(x, n * B, replace = TRUE), B, n)
DDX21wNup98resampledMeans = apply(DDX21wNup98resamples, 1, mean)
rm(DDX21wNup98resamples)
#For genes that don't bind Nup98
x = DDX21RIPgeneDT$count[DDX21RIPgeneDT$test == FALSE]
n = sum(DDX21RIPgeneDT$test == TRUE)*2
B = 10000
## bootstrap resamples
DDX21noNup98resamples = matrix(sample(x, n * B, replace = TRUE), B, n)
DDX21noNup98resampledMeans = apply(DDX21noNup98resamples, 1, mean)
rm(DDX21noNup98resamples)
par(mfrow=c(1,2))
hist(DDX21wNup98resampledMeans,main = "Interaction with Nup98",xlab = "")
mtext(text="Number of DDX21 interacting \n mRNA intervals per gene", side=1, line=3)
hist(DDX21noNup98resampledMeans,main = "No Nup98 interaction",xlab = "")
mtext(text="Number of DDX21 interacting \n mRNA intervals per gene", side=1, line=3)
independence_test(DDX21RIPgeneDT$count ~ DDX21RIPgeneDT$test, distribution = approximate(B=100000))
#For genes that bind Nup98
DHX9v2RIPgeneDT$test <- (DHX9v2RIPgeneDT$gene_id.y %in% N98RIP_gen.05)
x = DHX9v2RIPgeneDT$count[DHX9v2RIPgeneDT$test == TRUE]
n = sum(DHX9v2RIPgeneDT$test == TRUE)*2
B = 10000
DHX9v2wNup98resamples = matrix(sample(x, n * B, replace = TRUE), B, n)
DHX9v2wNup98resampledMeans = apply(DHX9v2wNup98resamples, 1, mean)
rm(DHX9v2wNup98resamples)
#For genes that don't bind Nup98
x = DHX9v2RIPgeneDT$count[DHX9v2RIPgeneDT$test == FALSE]
n = sum(DHX9v2RIPgeneDT$test == TRUE)
B = 10000
## bootstrap resamples
DHX9v2noNup98resamples = matrix(sample(x, n * B, replace = TRUE), B, n)
DHX9v2noNup98resampledMeans = apply(DHX9v2noNup98resamples, 1, mean)
rm(DHX9v2noNup98resamples)
par(mfrow=c(1,2))
hist(DHX9v2wNup98resampledMeans,main = "Interaction with Nup98",xlab = "")
mtext(text="Number of DHX9 interacting \n mRNA intervals per gene", side=1, line=3)
hist(DHX9v2noNup98resampledMeans,main = "No Nup98 interaction",xlab = "")
mtext(text="Number of DHX9 interacting \n mRNA intervals per gene", side=1, line=3)
independence_test(DHX9v2RIPgeneDT$count ~ DHX9v2RIPgeneDT$test, distribution = approximate(B=100000))
#For genes that bind Nup98
DDX3v2RIPgeneDT$test <- (DDX3v2RIPgeneDT$ensGene.name2 %in% N98RIP_gen.05)
x = DDX3v2RIPgeneDT$count[DDX3v2RIPgeneDT$test == TRUE]
n = sum(DDX3v2RIPgeneDT$test == TRUE)
B = 10000
DDX3v2wNup98resamples = matrix(sample(x, n * B, replace = TRUE), B, n)
DDX3v2wNup98resampledMeans = apply(DDX3v2wNup98resamples, 1, mean)
rm(DDX3v2wNup98resamples)
#For genes that don't bind Nup98
x = DDX3v2RIPgeneDT$count[DDX3v2RIPgeneDT$test == FALSE]
n = sum(DDX3v2RIPgeneDT$test == TRUE)
B = 10000
## bootstrap resamples
DDX3v2noNup98resamples = matrix(sample(x, n * B, replace = TRUE), B, n)
DDX3v2noNup98resampledMeans = apply(DDX3v2noNup98resamples, 1, mean)
rm(DDX3v2noNup98resamples)
par(mfrow=c(1,2))
hist(DDX3v2wNup98resampledMeans,main = "Interaction with Nup98",xlab = "")
mtext(text="Number of DDX3 interacting \n mRNA intervals per gene", side=1, line=3)
hist(DDX3v2noNup98resampledMeans,main = "No Nup98 Interaction",xlab = "")
mtext(text="Number of DDX3 interacting \n mRNA intervals per gene", side=1, line=3)
independence_test(DDX3v2RIPgeneDT$count ~ DDX3v2RIPgeneDT$test, distribution = approximate(B=100000))
#For genes that bind Nup98
DDX6RIP$test <- (DDX6RIP$ensGene.name2 %in% N98RIP_gen.05)
x = DDX6RIP$count[DDX6RIP$test == TRUE]
n = sum(DDX6RIP$test == TRUE)
B = 10000
DDX6wNup98resamples = matrix(sample(x, n * B, replace = TRUE), B, n)
DDX6wNup98resampledMeans = apply(DDX6wNup98resamples, 1, mean)
rm(DDX6wNup98resamples)
#For genes that don't bind Nup98
x = DDX6RIP$count[DDX6RIP$test == FALSE]
n = sum(DDX6RIP$test == TRUE)
B = 10000
## bootstrap resamples
DDX6noNup98resamples = matrix(sample(x, n * B, replace = TRUE), B, n)
DDX6noNup98resampledMeans = apply(DDX6noNup98resamples, 1, mean)
rm(DDX6noNup98resamples)
par(mfrow=c(1,2))
hist(DDX6wNup98resampledMeans,main = "Interaction with Nup98",xlab = "")
mtext(text="Number of DDX6 interacting \n mRNA intervals per gene", side=1, line=3)
hist(DDX6noNup98resampledMeans,main = "No Nup98 interaction",xlab = "")
mtext(text="Number of DDX6 interacting \n mRNA intervals per gene", side=1, line=3)
independence_test(DDX6RIP$count ~ DDX6RIP$test, distribution = approximate(B=100000))
#For genes that bind Nup98
DDX59RIP$test <- (DDX59RIP$ensGene.name2 %in% N98RIP_gen.05)
x = DDX59RIP$count[DDX59RIP$test == TRUE]
n = sum(DDX59RIP$test == TRUE)
B = 10000
DDX59wNup98resamples = matrix(sample(x, n * B, replace = TRUE), B, n)
DDX59wNup98resampledMeans = apply(DDX59wNup98resamples, 1, mean)
rm(DDX59wNup98resamples)
#For genes that don't bind Nup98
x = DDX59RIP$count[DDX59RIP$test == FALSE]
n = sum(DDX59RIP$test == TRUE)
B = 10000
## bootstrap resamples
DDX59noNup98resamples = matrix(sample(x, n * B, replace = TRUE), B, n)
DDX59noNup98resampledMeans = apply(DDX59noNup98resamples, 1, mean)
rm(DDX59noNup98resamples)
par(mfrow=c(1,2))
hist(DDX59wNup98resampledMeans,main = "Interaction with Nup98",xlab = "")
mtext(text="Number of DDX59 interacting \n mRNA intervals per gene", side=1, line=3)
hist(DDX59noNup98resampledMeans,main = "No Nup98 interaction",xlab = "")
mtext(text="Number of DDX59 interacting \n mRNA intervals per gene", side=1, line=3)
independence_test(DDX59RIP$count ~ DDX59RIP$test, distribution = approximate(B=100000))
boxplot(DDX21noNup98resampledMeans,DDX21wNup98resampledMeans, names = c("No", "Yes"), main = "DDX21", ylab = "", xlab = "Interaction of Nup98 with target mRNA")
mtext(text="Number of DDX21 interacting \n mRNA intervals per gene", side=2, line=2)
boxplot(DDX3v2noNup98resampledMeans,DDX3v2wNup98resampledMeans, names = c("No", "Yes"), main = "DDX3", ylab = "", xlab = "Interaction of Nup98 with target mRNA")
mtext(text="Number of DDX3 interacting \n mRNA intervals per gene", side=2, line=2)
boxplot(DHX9v2noNup98resampledMeans,DHX9v2wNup98resampledMeans, names = c("No", "Yes"), main = "DHX9", ylab = "", xlab = "Interaction of Nup98 with target mRNA")
mtext(text="Number of DHX9 interacting \n mRNA intervals per gene", side=2, line=2)
boxplot(DDX6noNup98resampledMeans,DDX6wNup98resampledMeans, names = c("No", "Yes"), main = "DDX6", ylab = "", xlab = "Interaction of Nup98 with target mRNA")
mtext(text="Number of DDX6 interacting \n mRNA intervals per gene", side=2, line=2)
boxplot(DDX59noNup98resampledMeans,DDX59wNup98resampledMeans, names = c("No", "Yes"), main = "DDX59", ylab = "", xlab = "Interaction of Nup98 with target mRNA")
mtext(text="Number of DDX59 interacting \n mRNA intervals per gene", side=2, line=2)
Value <- DDX21noNup98resampledMeans
Nup98.bound <- rep("no",length(Value))
DBP.RIP <- rep("DDX21",length(Value))
DDX21.no <- cbind(Value,Nup98.bound,DBP.RIP)
Value <- DDX21wNup98resampledMeans
Nup98.bound <- rep("yes",length(Value))
DBP.RIP <- rep("DDX21",length(Value))
DDX21.yes <- cbind(Value,Nup98.bound,DBP.RIP)
DDX21 <- as.data.frame(rbind(DDX21.yes,DDX21.no))
DDX21$scaleT <- scale(as.numeric(as.character(DDX21[,1])),center = TRUE,scale = TRUE)
DDX21$Value <- as.numeric(as.character(DDX21$Value))
rm(DDX21.no)
rm(DDX21.yes)
Value <- DDX3v2noNup98resampledMeans
Nup98.bound <- rep("no",length(Value))
DBP.RIP <- rep("DDX3",length(Value))
DDX3.no <- cbind(Value,Nup98.bound,DBP.RIP)
Value <- DDX3v2wNup98resampledMeans
Nup98.bound <- rep("yes",length(Value))
DBP.RIP <- rep("DDX3",length(Value))
DDX3.yes <- cbind(Value,Nup98.bound,DBP.RIP)
DDX3 <- as.data.frame(rbind(DDX3.yes,DDX3.no))
DDX3$scaleT <- scale(as.numeric(as.character(DDX3[,1])),center = TRUE,scale = TRUE)
DDX3$Value <- as.numeric(as.character(DDX3$Value))
rm(DDX3.no)
rm(DDX3.yes)
Value <- DHX9v2noNup98resampledMeans
Nup98.bound <- rep("no",length(Value))
DBP.RIP <- rep("DHX9",length(Value))
DHX9.no <- cbind(Value,Nup98.bound,DBP.RIP)
Value <- DHX9v2wNup98resampledMeans
Nup98.bound <- rep("yes",length(Value))
DBP.RIP <- rep("DHX9",length(Value))
DHX9.yes <- cbind(Value,Nup98.bound,DBP.RIP)
DHX9 <- as.data.frame(rbind(DHX9.yes,DHX9.no))
DHX9$scaleT <- scale(as.numeric(as.character(DHX9[,1])),center = TRUE,scale = TRUE)
DHX9$Value <- as.numeric(as.character(DHX9$Value))
rm(DHX9.no)
rm(DHX9.yes)
Value <- DDX59noNup98resampledMeans
Nup98.bound <- rep("no",length(Value))
DBP.RIP <- rep("DDX59",length(Value))
DDX59.no <- cbind(Value,Nup98.bound,DBP.RIP)
Value <- DDX59wNup98resampledMeans
Nup98.bound <- rep("yes",length(Value))
DBP.RIP <- rep("DDX59",length(Value))
DDX59.yes <- cbind(Value,Nup98.bound,DBP.RIP)
DDX59 <- as.data.frame(rbind(DDX59.yes,DDX59.no))
DDX59$scaleT <- scale(as.numeric(as.character(DDX59[,1])),center = TRUE,scale = TRUE)
DDX59$Value <- as.numeric(as.character(DDX59$Value))
rm(DDX59.no)
rm(DDX59.yes)
Value <- DDX6noNup98resampledMeans
Nup98.bound <- rep("no",length(Value))
DBP.RIP <- rep("DDX6",length(Value))
DDX6.no <- cbind(Value,Nup98.bound,DBP.RIP)
Value <- DDX6wNup98resampledMeans
Nup98.bound <- rep("yes",length(Value))
DBP.RIP <- rep("DDX6",length(Value))
DDX6.yes <- cbind(Value,Nup98.bound,DBP.RIP)
DDX6 <- as.data.frame(rbind(DDX6.yes,DDX6.no))
DDX6$scaleT <- scale(as.numeric(as.character(DDX6[,1])),center = TRUE,scale = TRUE)
DDX6$Value <- as.numeric(as.character(DDX6$Value))
rm(DDX6.no)
rm(DDX6.yes)
All <- rbind(DDX21,DDX3,DHX9,DDX59,DDX6)
All <- rbind(DDX21,DDX3,DHX9,DDX59,DDX6)
All$scaleT <- unlist(as.numeric(as.character(All$scaleT)))
ggplot(All, aes(x=Nup98.bound,y=Value,fill=Nup98.bound)) +
geom_boxplot()+ facet_wrap(~DBP.RIP,scales = "free") +
geom_jitter(shape=16, position=position_jitter(0.4),size=0.05,alpha=0.05)+
xlab("Target mRNAs interaction with Nup98")+
ylab("Number of DBP interacting mRNA intervals per gene")+
scale_fill_hue(name="Nup98", breaks=c("yes", "no"), labels=c("yes", "no"))+
ggtitle("Interacting Nup98 and DBPs bind similar target mRNAs")+
theme_bw()
ggplot(All, aes(x=Nup98.bound,y=scaleT,fill=Nup98.bound)) +
geom_boxplot()+ facet_wrap(~DBP.RIP,scales = "free") +
geom_jitter(shape=16, position=position_jitter(0.4),size=0.03,alpha=0.03)+
xlab("Target mRNAs interaction with Nup98")+
ylab("Z-score of DBP interacting mRNA intervals per gene")+
scale_fill_hue(name="Nup98", breaks=c("yes", "no"), labels=c("yes", "no"))+
ggtitle("Interacting Nup98 and DBPs bind similar target mRNAs")+
theme_bw()
rm(list=ls(globalenv()))
#If need be:
source("http://bioconductor.org/biocLite.R")
biocLite("ChIPseeker")
biocLite("clusterProfiler")
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
biocLite("org.Hs.eg.db")
biocLite("GenomicFeatures")
biocLite("regioneR")
library(ChIPseeker)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
library(clusterProfiler)
library(org.Hs.eg.db)
library(GenomicFeatures)
library(regioneR)
files <- list.files("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIP-seq/bed files")
files
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIP-seq/bed files")
#Make sure the names here agree with the order of files in the list above
DDX11 = readPeakFile(files[[1]])
DDX21 = readPeakFile(files[[2]])
DDX21 = DDX21[seqnames(DDX21) != 'chrM']
DDX5 = readPeakFile(files[[3]])
N98FL = readPeakFile(files[[4]])
N98Nt = readPeakFile(files[[5]])
#rm(files)
peaks=GenomicRanges::GRangesList(N98FL=N98FL,N98Nt=N98Nt,DDX21=DDX21,DDX5=DDX5,DDX11=DDX11)
rm(DDX11)
rm(DDX21)
rm(DDX5)
rm(N98FL)
rm(N98Nt)
rm(files)
covplot(peaks)
peakAnnoList <- lapply(peaks, annotatePeak, TxDb=txdb,tssRegion=c(-10000,10000), verbose=FALSE)
plotAnnoBar(peakAnnoList)
plotDistToTSS(peakAnnoList)
promoter <- getPromoters(TxDb=txdb, upstream=10000, downstream=10000)
# Of note, you may need a computer with more than 8GB of RAM in order to run the function below.
tagMatrixList <- lapply(peaks, getTagMatrix, windows=promoter)
save(peaks,file = "all ChIP peaks as GRanges.RData")
save(tagMatrixList,file = "all ChIP peaks tagMatrix list TSS 10k.RData")
plotAvgProf(tagMatrixList, xlim=c(-10000, 10000),facet = "row")
test <- as.data.frame(ranges(peaks[[1]]))
print(names(peaks)[[1]])
mean(test$width)
test <- as.data.frame(ranges(peaks[[2]]))
print(names(peaks)[[2]])
mean(test$width)
test <- as.data.frame(ranges(peaks[[3]]))
print(names(peaks)[[3]])
mean(test$width)
test <- as.data.frame(ranges(peaks[[4]]))
print(names(peaks)[[4]])
mean(test$width)
test <- as.data.frame(ranges(peaks[[5]]))
print(names(peaks)[[5]])
mean(test$width)
rm(test)
rm(tagMatrixList)
pt <- overlapPermTest(A=peaks[[1]], B=peaks[[5]], ntimes=1000)
pt
plot(pt)
pt <- overlapPermTest(A=peaks[[1]], B=peaks[[5]], ntimes=1000)
pt2 <- overlapPermTest(A=peaks[[1]], B=peaks[[2]], ntimes=1000)
pt3 <- overlapPermTest(A=peaks[[1]], B=peaks[[3]], ntimes=1000)
pt4 <- overlapPermTest(A=peaks[[1]], B=peaks[[4]], ntimes=1000)
pt5 <- overlapPermTest(A=peaks[[2]], B=peaks[[5]], ntimes=1000)
pt6 <- overlapPermTest(A=peaks[[2]], B=peaks[[1]], ntimes=1000)
pt7 <- overlapPermTest(A=peaks[[2]], B=peaks[[3]], ntimes=1000)
pt8 <- overlapPermTest(A=peaks[[2]], B=peaks[[4]], ntimes=1000)
lz <- localZScore(pt=pt, A=peaks[[1]], B=peaks[[5]])
plot(lz)
pt2
plot(pt2)
lz <- localZScore(pt=pt2, A=peaks[[1]], B=peaks[[2]])
plot(lz)
pt3
plot(pt3)
lz <- localZScore(pt=pt3, A=peaks[[1]], B=peaks[[3]])
plot(lz)
pt4
plot(pt4)
lz <- localZScore(pt=pt4, A=peaks[[1]], B=peaks[[4]])
plot(lz)
pt5
plot(pt5)
lz <- localZScore(pt=pt5, A=peaks[[2]], B=peaks[[5]])
plot(lz)
pt6
plot(pt6)
lz <- localZScore(pt=pt6, A=peaks[[2]], B=peaks[[1]])
plot(lz)
pt7
plot(pt7)
lz <- localZScore(pt=pt7, A=peaks[[2]], B=peaks[[3]])
plot(lz)
pt8
plot(pt8)
lz <- localZScore(pt=pt6, A=peaks[[2]], B=peaks[[4]])
plot(lz)
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIPseq/bed files")
length(peaks[[1]])
length(peaks[[2]])
summary(peaks[[1]])
summary(peaks[[2]])
Nup98_construct <- c(rep("Full-length",3),rep("Nucleoplasmic_1-504",3))
DBP <- rep(c("DDX11","DDX21","DDX5"),2)
Nup98_interactor <- rep(c("no","yes","yes"),2)
Percentage_Overlap <- c(pt$numOverlaps$observed/length(peaks[[1]])*100,pt3$numOverlaps$observed/length(peaks[[1]])*100,pt4$numOverlaps$observed/length(peaks[[1]])*100,pt5$numOverlaps$observed/length(peaks[[2]])*100,pt7$numOverlaps$observed/length(peaks[[2]])*100,pt8$numOverlaps$observed/length(peaks[[2]])*100)
p_values <- c(pt$numOverlaps$pval,pt3$numOverlaps$pval,pt4$numOverlaps$pval,pt5$numOverlaps$pval,pt7$numOverlaps$pval,pt8$numOverlaps$pval)
Nup98_construct <- c(rep("Full-length",3),rep("Nucleoplasmic_1-504",3))
DBP <- rep(c("DDX11","DDX21","DDX5"),2)
Nup98_interactor <- rep(c("no","yes","yes"),2)
Percentage_Overlap <- c(pt$numOverlaps$observed/length(peaks[[1]])*100,pt3$numOverlaps$observed/length(peaks[[1]])*100,pt4$numOverlaps$observed/length(peaks[[1]])*100,pt5$numOverlaps$observed/length(peaks[[2]])*100,pt7$numOverlaps$observed/length(peaks[[2]])*100,pt8$numOverlaps$observed/length(peaks[[2]])*100)
p_values <- c(pt$numOverlaps$pval,pt3$numOverlaps$pval,pt4$numOverlaps$pval,pt5$numOverlaps$pval,pt7$numOverlaps$pval,pt8$numOverlaps$pval)
Results <- cbind(Nup98_construct,DBP,Nup98_interactor,Percentage_Overlap,p_values)
kable(Results ,format = "markdown", align = "l", padding = 2)
Results <- c()
Nup98_construct <- c(rep("Full-length",3),rep("Nucleoplasmic_1-504",3))
DBP <- rep(c("DDX11","DDX21","DDX5"),2)
Nup98_interactor <- rep(c("no","yes","yes"),2)
Percentage_Overlap <- c(pt$numOverlaps$observed/length(peaks[[1]])*100,pt3$numOverlaps$observed/length(peaks[[1]])*100,pt4$numOverlaps$observed/length(peaks[[1]])*100,pt5$numOverlaps$observed/length(peaks[[2]])*100,pt7$numOverlaps$observed/length(peaks[[2]])*100,pt8$numOverlaps$observed/length(peaks[[2]])*100)
p_values <- c(pt$numOverlaps$pval,pt3$numOverlaps$pval,pt4$numOverlaps$pval,pt5$numOverlaps$pval,pt7$numOverlaps$pval,pt8$numOverlaps$pval)
adj_p <- p.adjust(p_values, method = "BH", n = length(p_values))
Results <- cbind(Nup98_construct,DBP,Nup98_interactor,Percentage_Overlap,p_values,adj_p)
kable(Results ,format = "markdown", align = "l", padding = 2)
Bound_promoters <- endoapply(peaks, subsetByOverlaps, query=promoter,ignore.strand=TRUE)
prom_num=lapply(X = Bound_promoters, FUN = function(x) length(ranges(x)))
total_num=lapply(X = peaks, FUN = function(x) length(ranges(x)))
mapply("/",prom_num,total_num,SIMPLIFY = TRUE)
pt9 <- overlapPermTest(A=Bound_promoters[[1]], B=Bound_promoters[[5]], ntimes=1000)
pt9
pta <- permTest(A=Bound_promoters[[1]], ntimes=100, randomize.function=randomizeRegions, universe=promoter,
evaluate.function=numOverlaps, B=Bound_promoters[[5]], verbose=FALSE)
pta
p.adjust(0.0099009900990099, method = "BH", n = 6)
pta <- permTest(A=Bound_promoters[[1]], ntimes=1000, randomize.function=randomizeRegions, universe=promoter, evaluate.function=numOverlaps, B=Bound_promoters[[5]], verbose=FALSE)
pta
p.adjust(pta$numOverlaps$pval, method = "BH", n = 6)
p.adjust(pta$numOverlaps$pval, method = "BH", n = 8)
p.adjust(pta$numOverlaps$pval, method = "BH", n = 16)
plot(pta)
promoterCo <- getPromoters(TxDb=txdb, upstream=15000, downstream=15000)
pta <- permTest(A=Bound_promoters[[1]], ntimes=100, randomize.function=randomizeRegions, universe=promoterCo,
evaluate.function=numOverlaps, B=Bound_promoters[[5]], verbose=FALSE)
pta
promoterCo=c(resize(promoterCo, 10000, fix="center", use.names=TRUE, ignore.strand=FALSE),resize(promoterCo, 10000, fix="start", use.names=TRUE, ignore.strand=FALSE),resize(promoterCo, 10000, fix="end", use.names=TRUE, ignore.strand=FALSE))
pta <- permTest(A=Bound_promoters[[1]], ntimes=100, randomize.function=randomizeRegions, universe=promoterCo,
evaluate.function=numOverlaps, B=Bound_promoters[[5]], verbose=FALSE)
pta
promoterCo=c(resize(promoterCo, 3334, fix="center", use.names=TRUE, ignore.strand=FALSE),resize(promoterCo, 3334, fix="start", use.names=TRUE, ignore.strand=FALSE),resize(promoterCo, 3334, fix="end", use.names=TRUE, ignore.strand=FALSE))
pta <- permTest(A=Bound_promoters[[1]], ntimes=100, randomize.function=randomizeRegions, universe=promoterCo,
evaluate.function=numOverlaps, B=Bound_promoters[[5]], verbose=FALSE)
pta
pta <- permTest(A=Bound_promoters[[1]], ntimes=100, randomize.function=randomizeRegions, universe=promoterCo,
evaluate.function=numOverlaps, B=Bound_promoters[[2]], verbose=FALSE)
pta
pta <- permTest(A=Bound_promoters[[1]], ntimes=100, randomize.function=resampleRegions, universe=promoter,
evaluate.function=numOverlaps, B=Bound_promoters[[5]], verbose=FALSE)
pta
pta <- permTest(A=Bound_promoters[[1]], ntimes=100, randomize.function=resampleRegions, universe=promoter,
evaluate.function=numOverlaps, B=Bound_promoters[[2]], verbose=FALSE)
pta
pta <- permTest(A=Bound_promoters[[1]], ntimes=1000, randomize.function=resampleRegions, universe=promoter,
evaluate.function=numOverlaps, B=Bound_promoters[[5]], verbose=FALSE)
pta
pta2 <- permTest(A=Bound_promoters[[1]], ntimes=1000, randomize.function=resampleRegions, universe=promoter,
evaluate.function=numOverlaps, B=Bound_promoters[[2]], verbose=FALSE)
pta <- permTest(A=Bound_promoters[[1]], ntimes=1000, randomize.function=resampleRegions, universe=promoter, evaluate.function=numOverlaps, B=Bound_promoters[[5]], verbose=FALSE)
pta2 <- permTest(A=Bound_promoters[[1]], ntimes=1000, randomize.function=resampleRegions, universe=promoter,evaluate.function=numOverlaps, B=Bound_promoters[[2]], verbose=FALSE)
pta3 <- permTest(A=Bound_promoters[[1]], ntimes=1000, randomize.function=resampleRegions, universe=promoter,evaluate.function=numOverlaps, B=Bound_promoters[[3]], verbose=FALSE)
pta4 <- permTest(A=Bound_promoters[[1]], ntimes=1000, randomize.function=resampleRegions, universe=promoter,evaluate.function=numOverlaps, B=Bound_promoters[[4]], verbose=FALSE)
pta5 <- permTest(A=Bound_promoters[[2]], ntimes=1000, randomize.function=resampleRegions, universe=promoter, evaluate.function=numOverlaps, B=Bound_promoters[[5]], verbose=FALSE)
pta6 <- permTest(A=Bound_promoters[[2]], ntimes=1000, randomize.function=resampleRegions, universe=promoter, evaluate.function=numOverlaps, B=Bound_promoters[[1]], verbose=FALSE)
pta7 <- permTest(A=Bound_promoters[[2]], ntimes=1000, randomize.function=resampleRegions, universe=promoter, evaluate.function=numOverlaps, B=Bound_promoters[[3]], verbose=FALSE)
pta8 <- permTest(A=Bound_promoters[[2]], ntimes=1000, randomize.function=resampleRegions, universe=promoter, evaluate.function=numOverlaps, B=Bound_promoters[[4]], verbose=FALSE)
Nup98_construct <- c(rep("Full-length",3),rep("Nucleoplasmic_1-504",3))
DBP <- rep(c("DDX11","DDX21","DDX5"),2)
Nup98_interactor <- rep(c("no","yes","yes"),2)
Percentage_Overlap <- c(pta$numOverlaps$observed/length(Bound_promoters[[1]])*100,pta3$numOverlaps$observed/length(Bound_promoters[[1]])*100,pta4$numOverlaps$observed/length(Bound_promoters[[1]])*100,pta5$numOverlaps$observed/length(Bound_promoters[[2]])*100,pta7$numOverlaps$observed/length(Bound_promoters[[2]])*100,pta8$numOverlaps$observed/length(Bound_promoters[[2]])*100)
p_values <- c(pta$numOverlaps$pval,pta3$numOverlaps$pval,pta4$numOverlaps$pval,pta5$numOverlaps$pval,pta7$numOverlaps$pval,pta8$numOverlaps$pval)
adj_p <- p.adjust(p_values, method = "BH", n = length(p_values))
ResultsA <- cbind(Nup98_construct,DBP,Nup98_interactor,Percentage_Overlap,p_values,adj_p)
kable(ResultsA ,format = "markdown", align = "l", padding = 2)
Nup98_construct <- c(rep("Full-length",3),rep("Nucleoplasmic_1-504",3))
DBP <- rep(c("DDX11","DDX21","DDX5"),2)
Nup98_interactor <- rep(c("no","yes","yes"),2)
Percentage_Overlap <- c(pt$numOverlaps$observed/length(peaks[[1]])*100,pt3$numOverlaps$observed/length(peaks[[1]])*100,pt4$numOverlaps$observed/length(peaks[[1]])*100,pt5$numOverlaps$observed/length(peaks[[2]])*100,pt7$numOverlaps$observed/length(peaks[[2]])*100,pt8$numOverlaps$observed/length(peaks[[2]])*100)
p_values <- c(pt$numOverlaps$pval,pt3$numOverlaps$pval,pt4$numOverlaps$pval,pt5$numOverlaps$pval,pt7$numOverlaps$pval,pt8$numOverlaps$pval)
adj_p <- p.adjust(p_values, method = "BH", n = length(p_values))
Results <- cbind(Nup98_construct,DBP,Nup98_interactor,Percentage_Overlap,p_values,adj_p)
kable(Results ,format = "markdown", align = "l", padding = 2)
ptatest <- permTest(A=Bound_promoters[[1]], ntimes=1000, randomize.function=resampleRegions, universe=promoter, evaluate.function=numOverlaps, B=Bound_promoters[[5]], verbose=FALSE, count.once = TRUE)
pta2 <- permTest(A=Bound_promoters[[1]], ntimes=1000, randomize.function=resampleRegions, universe=promoter,evaluate.function=numOverlaps, B=Bound_promoters[[2]], verbose=FALSE, count.once = TRUE)
ptatest <- permTest(A=Bound_promoters[[1]], ntimes=1000, randomize.function=resampleRegions, universe=promoter, evaluate.function=numOverlaps, B=Bound_promoters[[5]], verbose=FALSE, count.once = TRUE)
pta2 <- permTest(A=Bound_promoters[[1]], ntimes=1000, randomize.function=resampleRegions, universe=promoter,evaluate.function=numOverlaps, B=Bound_promoters[[2]], verbose=FALSE, count.once = TRUE)
pta3 <- permTest(A=Bound_promoters[[1]], ntimes=1000, randomize.function=resampleRegions, universe=promoter,evaluate.function=numOverlaps, B=Bound_promoters[[3]], verbose=FALSE, count.once = TRUE)
pta4 <- permTest(A=Bound_promoters[[1]], ntimes=1000, randomize.function=resampleRegions, universe=promoter,evaluate.function=numOverlaps, B=Bound_promoters[[4]], verbose=FALSE, count.once = TRUE)
pta5 <- permTest(A=Bound_promoters[[2]], ntimes=1000, randomize.function=resampleRegions, universe=promoter, evaluate.function=numOverlaps, B=Bound_promoters[[5]], verbose=FALSE, count.once = TRUE)
pta6 <- permTest(A=Bound_promoters[[2]], ntimes=1000, randomize.function=resampleRegions, universe=promoter, evaluate.function=numOverlaps, B=Bound_promoters[[1]], verbose=FALSE, count.once = TRUE)
pta7 <- permTest(A=Bound_promoters[[2]], ntimes=1000, randomize.function=resampleRegions, universe=promoter, evaluate.function=numOverlaps, B=Bound_promoters[[3]], verbose=FALSE, count.once = TRUE)
pta8 <- permTest(A=Bound_promoters[[2]], ntimes=1000, randomize.function=resampleRegions, universe=promoter, evaluate.function=numOverlaps, B=Bound_promoters[[4]], verbose=FALSE, count.once = TRUE)
rm(ResultsA)
Nup98_construct <- c(rep("Full-length",3),rep("Nucleoplasmic_1-504",3))
DBP <- rep(c("DDX11","DDX21","DDX5"),2)
Nup98_interactor <- rep(c("no","yes","yes"),2)
Percentage_Overlap <- c(pta$numOverlaps$observed/length(Bound_promoters[[1]])*100,pta3$numOverlaps$observed/length(Bound_promoters[[1]])*100,pta4$numOverlaps$observed/length(Bound_promoters[[1]])*100,pta5$numOverlaps$observed/length(Bound_promoters[[2]])*100,pta7$numOverlaps$observed/length(Bound_promoters[[2]])*100,pta8$numOverlaps$observed/length(Bound_promoters[[2]])*100)
p_values <- c(pta$numOverlaps$pval,pta3$numOverlaps$pval,pta4$numOverlaps$pval,pta5$numOverlaps$pval,pta7$numOverlaps$pval,pta8$numOverlaps$pval)
adj_p <- p.adjust(p_values, method = "BH", n = length(p_values))
ResultsA <- cbind(Nup98_construct,DBP,Nup98_interactor,Percentage_Overlap,p_values,adj_p)
kable(ResultsA ,format = "markdown", align = "l", padding = 2)
numOverlaps(Bound_promoters[[1]], Bound_promoters[[5]])
pta = ptatest
rm(ResultsA)
Nup98_construct <- c(rep("Full-length",3),rep("Nucleoplasmic_1-504",3))
DBP <- rep(c("DDX11","DDX21","DDX5"),2)
Nup98_interactor <- rep(c("no","yes","yes"),2)
Percentage_Overlap <- c(pta$numOverlaps$observed/length(Bound_promoters[[1]])*100,pta3$numOverlaps$observed/length(Bound_promoters[[1]])*100,pta4$numOverlaps$observed/length(Bound_promoters[[1]])*100,pta5$numOverlaps$observed/length(Bound_promoters[[2]])*100,pta7$numOverlaps$observed/length(Bound_promoters[[2]])*100,pta8$numOverlaps$observed/length(Bound_promoters[[2]])*100)
p_values <- c(pta$numOverlaps$pval,pta3$numOverlaps$pval,pta4$numOverlaps$pval,pta5$numOverlaps$pval,pta7$numOverlaps$pval,pta8$numOverlaps$pval)
adj_p <- p.adjust(p_values, method = "BH", n = length(p_values))
ResultsA <- cbind(Nup98_construct,DBP,Nup98_interactor,Percentage_Overlap,p_values,adj_p)
kable(ResultsA ,format = "markdown", align = "l", padding = 2)
ptatest <- overlapPermTest(A=Bound_promoters[[1]], B=Bound_promoters[[5]], ntimes=1000)
ptatest$numOverlaps$observed/length(Bound_promoters[[1]])*100
ptatest <- overlapPermTest(A=Bound_promoters[[1]], B=Bound_promoters[[5]], ntimes=100, count.once = TRUE)
ptatest$numOverlaps$observed/length(Bound_promoters[[1]])*100
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIPseq/bed files")
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIP-seq/bed files")
files <- list.files()
# Confirm these are the correct bed files in the list
files
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIP-seq/bed files")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIP-seq/bed files")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIP-seq/bed files")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIP-seq/bed files")
N98FLOL2 <- enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
N98FLOL2
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIP-seq/bed files")
N98NtOL2 <- enrichPeakOverlap(queryPeak = files[5], targetPeak = files[1:4], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool = TRUE, chainFile = NULL, verbose = FALSE)
N98NtOL2
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIP-seq/bed files")
N98FLOL2 <- enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3)], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
N98FLOL2
cbind(N98FLOL2$tSample,N98NtOL2$N_OL/N98NtOL2$qLen*100)
cbind(as.character(N98FLOL2$tSample),N98NtOL2$N_OL/N98NtOL2$qLen*100)
rbind(cbind(as.character(N98NtOL2$qSample),as.character(N98NtOL2$tSample),N98NtOL2$N_OL/N98NtOL2$qLen*100), cbind(as.character(N98FLOL2$qSample),as.character(N98FLOL2$tSample),N98FLOL2$N_OL/N98FLOL2$qLen*100))
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIP-seq/bed files")
N98NtOL2 <- enrichPeakOverlap(queryPeak = files[5], targetPeak = files[1:3], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool = TRUE, chainFile = NULL, verbose = FALSE)
N98NtOL2
rbind(cbind(as.character(N98NtOL2$qSample),as.character(N98NtOL2$tSample),N98NtOL2$N_OL/N98NtOL2$qLen*100,N98NtOL2$p.adjust), cbind(as.character(N98FLOL2$qSample),as.character(N98FLOL2$tSample),N98FLOL2$N_OL/N98FLOL2$qLen*100,N98FLOL2$p.adjust))
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIP-seq/bed promoters")
files <- list.files()
files
kable(rbind(cbind(as.character(N98NtOL2$qSample),as.character(N98NtOL2$tSample),N98NtOL2$N_OL/N98NtOL2$qLen*100,N98NtOL2$p.adjust), cbind(as.character(N98FLOL2$qSample),as.character(N98FLOL2$tSample),N98FLOL2$N_OL/N98FLOL2$qLen*100,N98FLOL2$p.adjust)),format = "markdown", align = "l", padding = 2)
Res <- rbind(cbind(as.character(N98NtOL2$qSample),as.character(N98NtOL2$tSample),N98NtOL2$N_OL/N98NtOL2$qLen*100,N98NtOL2$p.adjust), cbind(as.character(N98FLOL2$qSample),as.character(N98FLOL2$tSample),N98FLOL2$N_OL/N98FLOL2$qLen*100,N98FLOL2$p.adjust))
colnames(Res) <- c("Nup98_construct","DBP","Percent_overlap","adj.pval")
kable(Res,format = "markdown", align = "l", padding = 2)
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIP-seq/bed promoters")
N98FLOL2P <- enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3)], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
N98FLOL2P
setwd("/Users/Jujuba/Desktop/extra_view/Nup98-DBPs_extraview/ChIP-seq/bed promoters")
N98NtOL2P <- enrichPeakOverlap(queryPeak = files[5], targetPeak = files[1:3], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool = TRUE, chainFile = NULL, verbose = FALSE)
N98NtOL2P
ResP <- rbind(cbind(as.character(N98NtOL2P$qSample),as.character(N98NtOL2P$tSample),N98NtOL2P$N_OL/N98NtOL2P$qLen*100,N98NtOL2P$p.adjust), cbind(as.character(N98FLOL2P$qSample),as.character(N98FLOL2P$tSample),N98FLOL2P$N_OL/N98FLOL2P$qLen*100))
ResP <- rbind(cbind(as.character(N98NtOL2P$qSample),as.character(N98NtOL2P$tSample),N98NtOL2P$N_OL/N98NtOL2P$qLen*100), cbind(as.character(N98FLOL2P$qSample),as.character(N98FLOL2P$tSample),N98FLOL2P$N_OL/N98FLOL2P$qLen*100))
colnames(ResP) <- c("Nup98_construct","DBP","Percent_overlap")
kable(Res,format = "markdown", align = "l", padding = 2)
ResP <- rbind(cbind(as.character(N98NtOL2P$qSample),as.character(N98NtOL2P$tSample),N98NtOL2P$N_OL/N98NtOL2P$qLen*100), cbind(as.character(N98FLOL2P$qSample),as.character(N98FLOL2P$tSample),N98FLOL2P$N_OL/N98FLOL2P$qLen*100))
colnames(ResP) <- c("Nup98_construct","DBP","Percent_overlap")
kable(ResP,format = "markdown", align = "l", padding = 2)
ResP <- rbind(cbind(as.character(N98NtOL2P$qSample),as.character(N98NtOL2P$tSample),N98NtOL2P$N_OL/N98NtOL2P$qLen*100), cbind(as.character(N98FLOL2P$qSample),as.character(N98FLOL2P$tSample),N98FLOL2P$N_OL/N98FLOL2P$qLen*100))
colnames(ResP) <- c("Nup98_construct","DBP","Percent_overlap")
kable(ResP,format = "markdown", align = "l", padding = 2)
?enrichPeakOverlap
?numOverlaps
