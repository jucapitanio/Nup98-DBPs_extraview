#If need be:
source("http://bioconductor.org/biocLite.R")
biocLite("ChIPseeker")
biocLite("clusterProfiler")
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
biocLite("org.Hs.eg.db")
library(ChIPseeker)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
library(clusterProfiler)
library(org.Hs.eg.db)
require("knitr")
opts_knit$set(root.dir = "C:/Users/Juliana/Desktop/ChIPseq final")
setwd("C:/Users/Juliana/Desktop/ChIPseq final")
library(ChIPseeker)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
library(clusterProfiler)
library(org.Hs.eg.db)
files <- list.files("C:/Users/Juliana/Desktop/ChIPseq final/bed files to use")
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed files to use")
DDX11 = readPeakFile(files[[1]])
DDX21 = readPeakFile(files[[2]])
DDX21 = DDX21[seqnames(DDX21) != 'chrM']
DDX5 = readPeakFile(files[[3]])
N98FL = readPeakFile(files[[4]])
N98Nt = readPeakFile(files[[5]])
#rm(files)
peaks=GenomicRanges::GRangesList(N98FL=N98FL,N98Nt=N98Nt,DDX21=DDX21,DDX5=DDX5,DDX11=DDX11)
#If you'd like to see the peaks on the chromosomes run the next line
#covplot(peaks)
promoter <- getPromoters(TxDb=txdb, upstream=10000, downstream=10000)
test <- as.data.frame(ranges(peaks[[1]]))
mean(test$width)
test <- as.data.frame(ranges(peaks[[1]]))
mean(test$width)
test <- as.data.frame(ranges(peaks[[2]]))
mean(test$width)
test <- as.data.frame(ranges(peaks[[3]]))
mean(test$width)
test <- as.data.frame(ranges(peaks[[4]]))
mean(test$width)
test <- as.data.frame(ranges(peaks[[5]]))
mean(test$width)
names(peaks[[1]])
name(peaks[[1]])
names(peaks[[1]])
names(peaks)
names(peaks)[[1]]
test <- as.data.frame(ranges(peaks[[1]]))
print(names(peaks)[[1]])
mean(test$width)
test <- as.data.frame(ranges(peaks[[2]]))
print(names(peaks)[[2]])
mean(test$width)
test <- as.data.frame(ranges(peaks[[3]]))
mean(test$width)
test <- as.data.frame(ranges(peaks[[4]]))
mean(test$width)
test <- as.data.frame(ranges(peaks[[5]]))
mean(test$width)
test <- as.data.frame(ranges(peaks[[1]]))
print(names(peaks)[[1]])
mean(test$width)
test <- as.data.frame(ranges(peaks[[2]]))
print(names(peaks)[[2]])
mean(test$width)
test <- as.data.frame(ranges(peaks[[3]]))
print(names(peaks)[[3]])
mean(test$width)
test <- as.data.frame(ranges(peaks[[4]]))
print(names(peaks)[[4]])
mean(test$width)
test <- as.data.frame(ranges(peaks[[5]]))
print(names(peaks)[[5]])
mean(test$width)
Bound_promoters <- endoapply(peaks, subsetByOverlaps, promoter)
ranges(Bound_promoters)
dim(ranges(Bound_promoters))
length(ranges(Bound_promoters))
length(ranges(Bound_promoters[[1]]))
lapply(X = Bound_promoters, FUN = function(x) length(ranges(x))
)
prom_num=lapply(X = Bound_promoters, FUN = function(x) length(ranges(x)))
total_num=lapply(X = peaks, FUN = function(x) length(ranges(x)))
prom_num/total_num
mapply("/",prom_num,total_num,SIMPLIFY = FALSE)
mapply("/",prom_num,total_num,SIMPLIFY = TRUE)
prom_num=lapply(X = Bound_promoters, FUN = function(x) length(ranges(x)))
total_num=lapply(X = peaks, FUN = function(x) length(ranges(x)))
mapply("/",prom_num,total_num,SIMPLIFY = TRUE)
N98FLoverlaps <- endoapply(peaks, subsetByOverlaps, N98FL)
N98Ntoverlaps <- endoapply(peaks, subsetByOverlaps, N98Nt)
N98both <- c(N98FL,N98Nt)
N98bothoverlaps <- endoapply(peaks, subsetByOverlaps, N98both)
#lapply(N98bothoverlaps, ranges)
N98FL_num=lapply(X = N98FLoverlaps, FUN = function(x) length(ranges(x)))
mapply("/",N98FLoverlaps,total_num,SIMPLIFY = TRUE)
mapply("/",N98FLoverlaps,total_num,SIMPLIFY = TRUE)
prom_num=lapply(X = Bound_promoters, FUN = function(x) length(ranges(x)))
total_num=lapply(X = peaks, FUN = function(x) length(ranges(x)))
mapply("/",prom_num,total_num,SIMPLIFY = TRUE)
N98FLoverlaps <- endoapply(peaks, subsetByOverlaps, N98FL)
N98Ntoverlaps <- endoapply(peaks, subsetByOverlaps, N98Nt)
N98both <- c(N98FL,N98Nt)
N98bothoverlaps <- endoapply(peaks, subsetByOverlaps, N98both)
#lapply(N98bothoverlaps, ranges)
N98FL_num=lapply(X = N98FLoverlaps, FUN = function(x) length(ranges(x)))
mapply("/",N98FLoverlaps,total_num,SIMPLIFY = TRUE)
N98FL_num=lapply(X = N98FLoverlaps, FUN = function(x) length(ranges(x)))
mapply("/",N98FL_num,total_num,SIMPLIFY = TRUE)
N98FL_num=lapply(X = N98FLoverlaps, FUN = function(x) length(ranges(x)))
mapply("/",N98FL_num,total_num,SIMPLIFY = TRUE)
N98Nt_num=lapply(X = N98Ntoverlaps, FUN = function(x) length(ranges(x)))
mapply("/",N98Nt_num,total_num,SIMPLIFY = TRUE)
N98both_num=lapply(X = N98bothoverlaps, FUN = function(x) length(ranges(x)))
mapply("/",N98both_num,total_num,SIMPLIFY = TRUE)
?subsetByOverlaps
Bound_promoters <- endoapply(peaks, subsetByOverlaps, promoter,ignore.strand=TRUE,)
Bound_promoters <- endoapply(peaks, subsetByOverlaps, query=promoter,ignore.strand=TRUE)
lapply(X = Bound_promoters, FUN = function(x) length(ranges(x)))
N98FLoverlaps <- endoapply(peaks, subsetByOverlaps, query=N98FL,ignore.strand=TRUE)
N98Ntoverlaps <- endoapply(peaks, subsetByOverlaps, query=N98Nt,ignore.strand=TRUE)
N98both <- c(N98FL,N98Nt)
N98bothoverlaps <- endoapply(peaks, subsetByOverlaps, query=N98both,,ignore.strand=TRUE)
N98FLoverlaps <- endoapply(peaks, subsetByOverlaps, query=N98FL,ignore.strand=TRUE)
N98Ntoverlaps <- endoapply(peaks, subsetByOverlaps, query=N98Nt,ignore.strand=TRUE)
N98both <- c(N98FL,N98Nt)
N98bothoverlaps <- endoapply(peaks, subsetByOverlaps, query=N98both,ignore.strand=TRUE)
#lapply(N98bothoverlaps, ranges)
N98FL_num=lapply(X = N98FLoverlaps, FUN = function(x) length(ranges(x)))
mapply("/",N98FL_num,total_num,SIMPLIFY = TRUE)
N98Nt_num=lapply(X = N98Ntoverlaps, FUN = function(x) length(ranges(x)))
mapply("/",N98Nt_num,total_num,SIMPLIFY = TRUE)
N98both_num=lapply(X = N98bothoverlaps, FUN = function(x) length(ranges(x)))
mapply("/",N98both_num,total_num,SIMPLIFY = TRUE)
setwd("C:/Users/Juliana/Desktop/ChIPseq final")
NAMES(Bound_promoters)
names(Bound_promoters)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
rtracklayer::export.bed(Bound_promoters[[1]], "N98FLpromoters.bed")
rtracklayer::export.bed(Bound_promoters[[2]], "N98Ntpromoters.bed")
rtracklayer::export.bed(Bound_promoters[[3]], "DDX21promoters.bed")
rtracklayer::export.bed(Bound_promoters[[4]], "DDX5promoters.bed")
rtracklayer::export.bed(Bound_promoters[[5]], "DDX11promoters.bed")
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
files <- list.files()
files
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[1:3], TxDb = txdb, pAdjustMethod = "fdr", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[1:3], TxDb = txdb, pAdjustMethod = "fdr", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
files
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = txdb, pAdjustMethod = "fdr", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = txdb, pAdjustMethod = "fdr", nShuffle = 1000, pool= FALSE, chainFile = NULL, verbose = FALSE)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = promoter, pAdjustMethod = "fdr", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = promoter, pAdjustMethod = "fdr", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE, replace=TRUE)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = getPromoters(TxDb=txdb, upstream=10000, downstream=10000), pAdjustMethod = "fdr", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = getPromoters(TxDb=txdb, upstream=20000, downstream=20000), pAdjustMethod = "fdr", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
?tileGenome
bins <- tileGenome(seqinfo(promoter),tilewidth=500,cut.last.tile.in.chrom=TRUE)
?seqinfo
bins <- tileGenome(seqinfo(txdb),tilewidth=500,cut.last.tile.in.chrom=TRUE)
promoters500bin <- split(promoters, bins, drop=FALSE)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
promoter <- getPromoters(TxDb=txdb, upstream=10000, downstream=10000)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
bins <- tileGenome(seqinfo(txdb),tilewidth=500,cut.last.tile.in.chrom=TRUE)
promoters500bin <- split(promoters, bins, drop=TRUE)
rm(bins)
?`resize,GenomicRanges-method`
P_center=resize(promoter, 6667, fix="center", use.names=TRUE, ignore.strand=FALSE)
P_start=resize(promoter, 6667, fix="start", use.names=TRUE, ignore.strand=FALSE)
P_end=resize(promoter, 6667, fix="end", use.names=TRUE, ignore.strand=FALSE)
PromoterResize <- c(P_center,P_start,P_end)
files <- list.files()
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = PromoterResize, pAdjustMethod = "fdr", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
files[c(1:3,5)]
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
promoterCo <- getPromoters(TxDb=txdb, upstream=15000, downstream=15000)
promoterCO=c(resize(promoterCo, 10000, fix="center", use.names=TRUE, ignore.strand=FALSE),resize(promoterCo, 10000, fix="start", use.names=TRUE, ignore.strand=FALSE),resize(promoterCo, 10000, fix="end", use.names=TRUE, ignore.strand=FALSE))
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = promoterCO, pAdjustMethod = "fdr", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
supportedUCSCtables(genome="hg19")
Értracklayer::export
?rtracklayer::export
citation(package = "base", lib.loc = NULL)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
enrichPeakOverlap(queryPeak = files[5], targetPeak = files[1:3], TxDb = txdb, pAdjustMethod = "fdr", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
enrichPeakOverlap(queryPeak = files[5], targetPeak = files[1:4], TxDb = txdb, pAdjustMethod = "fdr", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
files <- list.files("C:/Users/Juliana/Desktop/ChIPseq final/bed files to use")
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed files to use")
DDX11 = readPeakFile(files[[1]])
DDX21 = readPeakFile(files[[2]])
DDX21 = DDX21[seqnames(DDX21) != 'chrM']
DDX5 = readPeakFile(files[[3]])
N98FL = readPeakFile(files[[4]])
N98Nt = readPeakFile(files[[5]])
#rm(files)
peaks=GenomicRanges::GRangesList(N98FL=N98FL,N98Nt=N98Nt,DDX21=DDX21,DDX5=DDX5,DDX11=DDX11)
#If you'd like to see the peaks on the chromosomes run the next line
#covplot(peaks)
promoter <- getPromoters(TxDb=txdb, upstream=10000, downstream=10000)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed files to use")
files <- list.files()
files
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed files to use")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed files to use")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed files to use")
enrichPeakOverlap(queryPeak = files[5], targetPeak = files[1:4], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool = TRUE, chainFile = NULL, verbose = FALSE)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
setwd("C:/Users/Juliana/Desktop/ChIPseq final/bed promoters")
files <- list.files()
enrichPeakOverlap(queryPeak = files[4], targetPeak = files[c(1:3,5)], TxDb = txdb, pAdjustMethod = "BH", nShuffle = 1000, pool= TRUE, chainFile = NULL, verbose = FALSE)
DHX9minus_ensemblGenes <- read_delim("D:/Lab stuff 2017/Nucleus extra view/NGS analysis/GSE89276-RIP DHX9/DHX9minus_ensemblGenes", "\t", escape_double = FALSE, trim_ws = TRUE, skip = 1)
DHX9minus_ensemblGenes <- read_delim("D:/Lab stuff 2017/Nucleus extra view/NGS analysis/GSE89276-RIP DHX9/DHX9minus_ensemblGenes", "\t", escape_double = FALSE, trim_ws = TRUE, skip = 1)
library(knitr)
library(ggplot2)
library(reshape2)
library(plyr)
library(dplyr)
library(data.table)
library(dtplyr)
library(knitr)
library(ggplot2)
library(reshape2)
library(plyr)
library(dplyr)
library(data.table)
#library(dtplyr)
library(readr)
library(GeneOverlap)
library(knitr)
library(ggplot2)
library(reshape2)
library(plyr)
library(dplyr)
library(data.table)
#library(dtplyr)
library(readr)
source("http://bioconductor.org/biocLite.R")
biocLite("GeneOverlap")
library(GeneOverlap)
setwd("D:/Lab stuff 2017/Nucleus extra view/NGS analysis")
DHX9minus_ensemblGenes <- read_delim("D:/Lab stuff 2017/Nucleus extra view/NGS analysis/GSE89276-RIP DHX9/DHX9minus_ensemblGenes", "\t", escape_double = FALSE, trim_ws = TRUE, skip = 1)
